function gadget:GetInfo()
    return {
        name    = "Pieces Apply",
        desc    = "Use pieces of one unit to another, dynamically and pretty",
        author  = "XNTEABDSC, inspired by Pressure Lines's unit_changepiece.lua",
        date    = "",
        license = "GNU GPL, v2 or later",
        layer   = 50,
        enabled = true --loaded by default?
    }
end


local Pieces=GG.Pieces or {}
GG.Pieces=Pieces

local jsonencode=Spring.Utilities.json.encode
local jsondecode=Spring.Utilities.json.decode

if (gadgetHandler:IsSyncedCode()) then
    ---@type {[string]:boolean}
    local DynPieceInfos={}
    
    ---@class DynPieceInfo
    ---@field basePiece string|integer
    ---@field matrix {[integer]:number}?
    ---@field matrix2 {[integer]:number}?
    ---@field drawPieces { [integer]: integer|string|{piece:(integer|string),matrix:{[integer]:number}?,matrix2:{[integer]:number}?} }?
    ---@field children {[integer|string]:DynPieceInfo}?

    local TryLoadUnitPiecesInfos=GG.Pieces.LoadUnitPiecesInfos

    function gadget:Initialize()
        TryLoadUnitPiecesInfos=GG.Pieces.LoadUnitPiecesInfos
    end

    ---@param dynPieceInfo DynPieceInfo
    local function CreateDynPieceInfo(name,unitDefId,dynPieceInfo)
        if DynPieceInfos[name] then return end
        TryLoadUnitPiecesInfos(unitDefId)
        SendToUnsynced("CreateDynPieceInfo",name,unitDefId,jsonencode(dynPieceInfo))
        DynPieceInfos[name]=true
    end
    Pieces.CreateDynPieceInfo=CreateDynPieceInfo
    local function ApplyDynPieceInfoNamed(unitId,tarPieceToSrcPieceInfo,srcPiecesInfoName)
        SendToUnsynced("ApplyDynPieceInfoNamed",unitId,jsonencode(tarPieceToSrcPieceInfo),srcPiecesInfoName)
    end
    Pieces.ApplyDynPieceInfoNamed=ApplyDynPieceInfoNamed
else
    
    ---@class DynPieceInfoProcessed
    ---@field basePieceId integer
    ---@field matrix {[integer]:number}?
    ---@field matrix2 {[integer]:number}?
    ---@field drawList integer?
    ---@field children {[integer|string]:DynPieceInfoProcessed}?

    ---@type {[string]:DynPieceInfoProcessed}
    local DynPieceInfos={}


    local wacky_utils = Spring.Utilities.wacky_utils
    local MultMatrix44 = wacky_utils.MultMatrix44
    local NewMatrix44Unit = wacky_utils.NewMatrix44Unit()


    local glCreateList = gl.CreateList
    local glPushMatrix = gl.PushMatrix
    local glPopMatrix = gl.PopMatrix
    local glLoadMatrix = gl.LoadMatrix
    local glCallList = gl.CallList



    ---@param info DynPieceInfo
    ---@return DynPieceInfoProcessed
    local function ProcessDynPiecesInfo(unitDefId,info)
        local infos={}
        local unitPieces = Pieces.UnitsPieces[unitDefId]
        local unitPiecesMap = Pieces.UnitsPiecesMap[unitDefId]
        local unitPieceInfos = Pieces.UnitsPieceInfos[unitDefId]
        local unitPiecesMatrix = Pieces.UnitsPiecesMatrix[unitDefId]
        local unitPiecesParent = Pieces.UnitsPiecesParent[unitDefId]
        local unitPieceDrawLists = Pieces.UnitsPieceDrawLists[unitDefId]
        ---@return {[integer]:number}
        local function GetMatrixFromAToB(a, b)
            local Matrix = NewMatrix44Unit() --UnitPiecesMatrix[a]
            local cur = a
            while (cur ~= nil and cur ~= b) do
                local Matrix2 = unitPiecesMatrix[cur]
                Matrix = MultMatrix44(Matrix, Matrix2)
                cur = unitPiecesParent[cur]
            end
            if cur == nil then
                Spring.Echo("unit_piece_apply: piece " ..
                tostring(unitPieces[a]) .. " dont have parent " .. tostring(unitPieces[b]))
            end
            return Matrix
        end

        ---@param info_ DynPieceInfo
        ---@param parentPieceId integer?
        local function rec(info_,parentPieceId)
            local basePieceId = info_.basePiece
            if type(basePieceId) == "string" then
                basePieceId = unitPiecesMap[basePieceId]
            end

            local matrix = info_.matrix
            if not matrix then
                if parentPieceId then
                    matrix = GetMatrixFromAToB(basePieceId, parentPieceId)
                end
            end
            -- ---@cast Matrix -unknown|nil
            local matrix2 = info_.matrix2
            --[=[
        if Matrix2 then
            Matrix=MultMatrix44(Matrix2,Matrix)
        end]=]
            local drawPieces = info_.drawPieces
            local dList=nil
            if drawPieces then
                dList=glCreateList(function()
                    for _, p in pairs(drawPieces) do
                        local pidx = p.piece
                        if type(pidx) == "string" then
                            pidx = unitPiecesMap[pidx]
                        end
                        local pMatrix = p.matrix
                        if not pMatrix then
                            pMatrix = GetMatrixFromAToB(pidx, basePieceId)
                        end
                        local pMatrix2 = p.matrix2
                        if pMatrix2 then
                            pMatrix = MultMatrix44(pMatrix2, pMatrix)
                        end
                        glPushMatrix()
                        glLoadMatrix(pMatrix)
                        glCallList(unitPieceDrawLists[pidx])
                        glPopMatrix()
                    end
                end)
            else
                dList=nil
            end
            local children=nil
            if info_.children then
                children={}
                for key, value in pairs(info_.children) do
                    children[key]=rec(value,basePieceId)
                end

            end

            ---@type DynPieceInfoProcessed
            local o2 = {
                basePieceId = basePieceId,
                matrix = matrix,
                matrix2 = matrix2,
                drawList = dList,
                children=children
            }
            return o2
        end
        return rec(info,nil)
    end

    Pieces.DynPieceInfo = ProcessDynPiecesInfo


    local SetupRendering
    do
        local surSetLODCount = Spring.UnitRendering.SetLODCount
        local surSetLODLength = Spring.UnitRendering.SetLODLength
        local surSetMaterial = Spring.UnitRendering.SetMaterial
        SetupRendering = function(unitID, unitDefID)
            --- why?
            surSetLODCount(unitID, 1)
            surSetLODLength(unitID, 1, -1000)
            -- ]=]
            -- [=[
            surSetMaterial(unitID, 1, "opaque",
                { shader = "s3o", texunit0 = '%' .. unitDefID .. ":0", texunit1 = '%' .. unitDefID .. ":1" })
            surSetMaterial(unitID, 1, "shadow", { shader = "s3o" })
            surSetMaterial(unitID, 1, "alpha", { shader = "s3o" })
        end
    end
    Pieces.SetupRendering=SetupRendering

    local spGetUnitPieceList = Spring.GetUnitPieceList
    local spGetUnitPieceMap = Spring.GetUnitPieceMap
    local spSetUnitPieceMatrix = Spring.SetUnitPieceMatrix
    local spSetUnitPieceParent = Spring.SetUnitPieceParent
    local spGetUnitPieceMatrix = Spring.GetUnitPieceMatrix
    local surSetPieceList = Spring.UnitRendering.SetPieceList

    local spGetUnitDefID = Spring.GetUnitDefID
    ---@param tarPieceToSrcPieceInfo_ table
    ---@param srcPieceInfo_ DynPieceInfoProcessed
    local function ApplyDynPieceInfo(unitId, tarPieceToSrcPieceInfo_, srcPieceInfo_)
        local pieceList = spGetUnitPieceList(unitId)
        local pieceMap = spGetUnitPieceMap(unitId)
        ---@cast pieceMap -nil

        SetupRendering(unitId, spGetUnitDefID(unitId))

        
        ---@param srcPieceInfo DynPieceInfoProcessed
        local function Apply1DynPieceInfo(tarPiece,tarParent,srcPieceInfo)
            if tarParent then
                spSetUnitPieceParent(unitId, tarPiece, tarParent)
            end
            local matrix = srcPieceInfo.matrix or { spGetUnitPieceMatrix(unitId,tarPiece) }
            local matrix2 = srcPieceInfo.matrix2
            if matrix2 then
                matrix = MultMatrix44(matrix2, matrix)
            end
            spSetUnitPieceMatrix(unitId, tarPiece, matrix)
            local dList = srcPieceInfo.drawList
            if dList then
                surSetPieceList(unitID, 1, tarPiece, dList)
            end
            
        end

        ---@param srcPieceInfo DynPieceInfoProcessed
        local function rec(tarPieceToSrcPieceInfo,tarParent, srcPieceInfo)
            local tarPiece=tarPieceToSrcPieceInfo[1]
            Apply1DynPieceInfo(tarPiece,tarParent,srcPieceInfo)
            local tarChildren=tarPieceToSrcPieceInfo[2]
            local srcChildren=srcPieceInfo.children
            if tarChildren and srcChildren then
                for key, value in pairs(tarChildren) do
                    rec(value,tarPiece,srcChildren[key])
                end
            end
        end
        rec(tarPieceToSrcPieceInfo_,nil,srcPieceInfo_)
    end

    Pieces.ApplyDynPieceInfo = ApplyDynPieceInfo


    function gadget:Initialize()
        gadgetHandler:AddSyncAction("CreateDynPieceInfo",function(msg,name,unitDefId,dynPieceInfo)
            --ProcessDynPieceInfo
            DynPieceInfos[name]=ProcessDynPiecesInfo(unitDefId,jsondecode(dynPieceInfo))
        end)
        gadgetHandler:AddSyncAction("ApplyDynPieceInfoNamed",function(msg,unitId,tarPieceToSrcPieceInfo,srcPiecesInfoName)
            ApplyDynPieceInfo(unitId,jsondecode(tarPieceToSrcPieceInfo),DynPieceInfos[srcPiecesInfoName])
        end)
    end
end
